name: Main

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency: CI
jobs:

#  analyze-code:
#    name: Analyze Code
#    uses: ./.github/workflows/analyze-code.yml
#    with:
#      registry: association-registry-kbomutations
#    secrets: inherit

  set-release-version:
    if: github.repository_owner == 'Informatievlaanderen'
    name: Decide next version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20.6.1
      - run: npm ci

      - name: Run Semantic Release dry-run
        shell: bash
        run: npx semantic-release --dry-run
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_COMMIT: ${{ github.sha }}
          GIT_USERNAME: ${{ secrets.VBR_GIT_USER }}
          GIT_AUTHOR_NAME: ${{ secrets.VBR_GIT_USER }}
          GIT_COMMITTER_NAME: ${{ secrets.VBR_GIT_USER }}
          GIT_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
          GIT_AUTHOR_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
          GIT_COMMITTER_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}

      - name: Set Release Version
        id: set-version
        run: |
          [ ! -f semver ] && echo none > semver
          echo $(cat semver)
          echo ::set-output name=version::$(cat semver)
          echo RELEASE_VERSION=$(cat semver) >> $GITHUB_ENV
        shell: bash

  build-mutation-lambda:
    name: Build Mutation Lambda
    uses: ./.github/workflows/build-lambda.yml
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      lambda-name: lambda-mutation
      test-project: AssociationRegistry.KboMutations.MutationLambdaContainer.Tests
      build-project: AssociationRegistry.KboMutations.MutationLambdaContainer
      semver: ${{ needs.set-release-version.outputs.version }}
      dotnet-version: '7.x'
    secrets: inherit

  build-mutationfile-lambda:
    name: Build Mutation File Lambda
    uses: ./.github/workflows/build-lambda.yml
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      lambda-name: lambda-mutationfile
      test-project: AssociationRegistry.KboMutations.MutationFileLambda.Tests
      build-project: AssociationRegistry.KboMutations.MutationFileLambda
      semver: ${{ needs.set-release-version.outputs.version }}
      dotnet-version: '7.x'
    secrets: inherit

  build-sync-lambda:
    name: Build Sync Lambda
    uses: ./.github/workflows/build-lambda.yml
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      lambda-name: lambda-sync
      test-project: AssociationRegistry.KboMutations.SyncLambda.Tests
      build-project: AssociationRegistry.KboMutations.SyncLambda
      semver: ${{ needs.set-release-version.outputs.version }}
      dotnet-version: '7.x'
    secrets: inherit      

  release:
    if: needs.set-release-version.outputs.version != 'none'
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: 
      - build-mutation-lambda
      - build-mutationfile-lambda
      - build-sync-lambda
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache NPM
        uses: informatievlaanderen/build-pipeline/.github/actions/cache-npm@main

      - name: Parse repository name
        run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
        shell: bash
        
      - name: Setup NodeJS
        uses: informatievlaanderen/build-pipeline/.github/actions/setup-nodejs@main

      - name: Setup Python
        uses: informatievlaanderen/build-pipeline/.github/actions/setup-python@main

      - name: Generate Token
        id: generate_token   # Add an ID to this step for reference
        run: node .github/build-scripts/generate-token.js
        env:
          APP_ID: ${{ secrets.MYBOT_APP_ID }}
          PRIVATE_KEY: ${{ secrets.MYBOT_PRIVATE_KEY }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.installationToken  }}

      - name: Install NPM dependencies
        shell: bash
        run: npm install --legacy-peer-deps

      - name: Run Semantic Release
        shell: bash
        run: npx semantic-release
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.BUILD_DOCKER_REGISTRY }}
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.installationToken  }}
          GIT_COMMIT: ${{ github.sha }}
          GIT_USERNAME: ${{ steps.generate_token.outputs.installationToken }}
          GIT_AUTHOR_NAME: ${{ secrets.VBR_GIT_USER }}
          GIT_COMMITTER_NAME: ${{ secrets.VBR_GIT_USER }}
          GIT_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
          GIT_AUTHOR_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
          GIT_COMMITTER_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}

      - name: Set Release Version
        id: set-version
        run: |
          [ ! -f semver ] && echo none > semver
          echo $(cat semver)
          echo ::set-output name=version::$(cat semver)
          echo RELEASE_VERSION=$(cat semver) >> $GITHUB_ENV
        shell: bash

  upload-mutation-lambda:
    name: Upload Mutation Lambda
    needs: [ release ]
    runs-on: ubuntu-latest
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.release.outputs.version != 'none') }}
    steps:
    - name: Download Lambda
      uses: actions/download-artifact@v4
      continue-on-error: false
      with:
        name: lambda-mutation-${{ needs.release.outputs.version }}
        path: ~/mutationfile/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION_PRD }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Push Lambda functions to S3
      shell: bash
      run: |
        aws s3 cp ~/mutation/lambda.zip s3://460116816372-lambda-mutation/$SEMVER/lambda.zip
      env:
        SEMVER: ${{ needs.release.outputs.version }}
      

  upload-mutationfile-lambda:
    name: Upload MutationFile Lambda
    needs: [ release ]
    runs-on: ubuntu-latest
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.release.outputs.version != 'none') }}
    steps:
      - name: Download Lambda
        uses: actions/download-artifact@v4
        continue-on-error: false
        with:
          name: lambda-mutationfile-${{ needs.release.outputs.version }}
          path: ~/mutationfile/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_PRD }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Lambda functions to S3
        shell: bash
        run: |
          aws s3 cp ~/mutationfile/lambda.zip s3://460116816372-lambda-mutationfile/$SEMVER/lambda.zip
        env:
          SEMVER: ${{ needs.release.outputs.version }}
  
  upload-sync-lambda:
    name: Upload Sync Lambda
    needs: [ release ]
    runs-on: ubuntu-latest
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.release.outputs.version != 'none') }}
    steps:
      - name: Download Lambda
        uses: actions/download-artifact@v4
        continue-on-error: false
        with:
          name: lambda-sync-${{ needs.release.outputs.version }}
          path: ~/mutation/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_PRD }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Lambda functions to S3
        shell: bash
        run: |
          aws s3 cp ~/sync/lambda.zip s3://460116816372-lambda-sync/$SEMVER/lambda.zip
        env:
          SEMVER: ${{ needs.release.outputs.version }}

  publish_to_atlassian:
    if: needs.release.outputs.version != 'none'
    needs: 
      - upload-mutation-lambda
      - upload-mutationfile-lambda
      - upload-sync-lambda
    name: Publish to Atlassian
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Parse repository name
        run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
        shell: bash
            
      - name: Cache Python
        uses: actions/cache@v4
        env:
          cache-name: cache-pip
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install requests markdown argparse

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.x'

      - name: .NET version
        shell: bash
        run: dotnet --info

      - name: Restore dotnet tools
        shell: bash
        run: |
          dotnet tool restore

      - name: Publish to Confluence
        if: needs.set-release-version.outputs.version != 'none'
        shell: bash
        run: ./packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-confluence.sh
        env:
          CONFLUENCE_TITLE: ${{ env.REPOSITORY_NAME }}
          CONFLUENCE_USERNAME: ${{ secrets.VBR_CONFLUENCE_USER }}
          CONFLUENCE_PASSWORD: ${{ secrets.VBR_CONFLUENCE_PASSWORD }}

      - name: Create Jira Release
        if: needs.set-release-version.outputs.version != 'none'
        shell: bash
        run: ./packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-jira.sh
        env:
          CONFLUENCE_TITLE: ${{ env.REPOSITORY_NAME }}
          CONFLUENCE_USERNAME: ${{ secrets.VBR_CONFLUENCE_USER }}
          CONFLUENCE_PASSWORD: ${{ secrets.VBR_CONFLUENCE_PASSWORD }}
          JIRA_PREFIX: Association-KboMutations
          JIRA_PROJECT: OR
          JIRA_VERSION: ${{ needs.set-release-version.outputs.version }}
            

  deploy-mutation-lambda-test:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ upload-mutation-lambda ]
    name: Deploy mutation lambda (Test)
    runs-on: ubuntu-latest

    steps:
      - name: CD Lambda(s) Configure credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_PRD }}

      - name: Prepare Lambda
        shell: bash
        run: |
          aws s3 cp s3://460116816372-lambda-mutation/$VERSION/lambda.zip s3://716164567317-lambda-mutation/lambda.zip --copy-props none
        env:
          VERSION: ${{ needs.release.outputs.version }}

      - name: Promote Lambda
        shell: bash
        run: |
          docker pull ghcr.io/okigan/awscurl:latest
          docker run --rm okigan/awscurl --access_key $ACCESS_KEY_ID --secret_key $SECRET_ACCESS_KEY_ID --region $REGION -X POST -d '{ "functionName": "kbo-mutations", "project": "kbomutations", "domain": "verenigingsregister" }' $PROMOTEURL/test
        env:
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY_ID: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          REGION: ${{ secrets.AWS_REGION_PRD }}
          PROMOTEURL: ${{ secrets.AWS_PROMOTE_LAMBDA_BASEURL }}

  deploy-mutation-file-lambda-test:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ upload-mutationfile-lambda ]
    name: Deploy mutation file lambda (Test)
    runs-on: ubuntu-latest

    steps:
      - name: CD Lambda(s) Configure credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_PRD }}

      - name: Prepare Lambda
        shell: bash
        run: |
          aws s3 cp s3://460116816372-lambda-mutationfile/$VERSION/lambda.zip s3://716164567317-lambda-mutationfile/lambda.zip --copy-props none
        env:
          VERSION: ${{ needs.release.outputs.version }}

      - name: Promote Lambda
        shell: bash
        run: |
          docker pull ghcr.io/okigan/awscurl:latest
          docker run --rm okigan/awscurl --access_key $ACCESS_KEY_ID --secret_key $SECRET_ACCESS_KEY_ID --region $REGION -X POST -d '{ "functionName": "kbo-mutations-file", "project": "kbomutations", "domain": "verenigingsregister" }' $PROMOTEURL/test
        env:
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY_ID: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          REGION: ${{ secrets.AWS_REGION_PRD }}
          PROMOTEURL: ${{ secrets.AWS_PROMOTE_LAMBDA_BASEURL }}

  deploy-sync-lambda-test:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ upload-sync-lambda ]
    name: Deploy sync lambda (Test)
    runs-on: ubuntu-latest

    steps:
      - name: CD Lambda(s) Configure credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_PRD }}

      - name: Prepare Lambda
        shell: bash
        run: |
          aws s3 cp s3://460116816372-lambda-sync/$VERSION/lambda.zip s3://716164567317-lambda-sync/lambda.zip --copy-props none
        env:
          VERSION: ${{ needs.release.outputs.version }}

      - name: Promote Lambda
        shell: bash
        run: |
          docker pull ghcr.io/okigan/awscurl:latest
          docker run --rm okigan/awscurl --access_key $ACCESS_KEY_ID --secret_key $SECRET_ACCESS_KEY_ID --region $REGION -X POST -d '{ "functionName": "kbo-sync", "project": "kbomutations", "domain": "verenigingsregister" }' $PROMOTEURL/test
        env:
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY_ID: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          REGION: ${{ secrets.AWS_REGION_PRD }}
          PROMOTEURL: ${{ secrets.AWS_PROMOTE_LAMBDA_BASEURL }}
